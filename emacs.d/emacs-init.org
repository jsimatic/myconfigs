#+TITLE:  Emacs Configuration File
#+AUTHOR: Jean Simatic (adapted from Thomas)
#+EMAIL:  jean@simatic.org
#+OPTIONS: toc:3 num:nil ^:nil

* About
This configuration is to be used with the following =init.el= :

#+begin_example
  ;; init.el for this setup. Must use Emacs 24
  (org-babel-load-file
  (expand-file-name "emacs-init.org"
                   user-emacs-directory))
#+end_example

* Startup Performance

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

* Initialisation des dépots de package & use-package
** Some informations

#+BEGIN_SRC emacs-lisp

(set-language-environment "UTF-8")
(setq user-full-name "Jean Simatic"
      user-mail-address "jean.simatic@hawai.tech")

#+END_SRC

** Ajout de melpa, org & gnu

#+BEGIN_SRC emacs-lisp
(require 'package)
;;(setq package-enable-at-startup nil)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(unless package-archive-contents
  (package-refresh-contents))
#+END_SRC

** Initialisation de use-package
Use-package est un ensemble de macro permettant de manager comme un boss ses
plugins. Outre d'obliger à correctement présenter son code, les macros ajoutent
des auto-load etc. qui permettent des meilleures performances.

[[https://github.com/jwiegley/use-package][Documentation sur le dépot Github du projet]] !

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package)
  (package-install 'diminish))
(setq use-package-always-ensure t)

(require 'use-package)
(require 'diminish)

(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+END_SRC

* Basic sane settings
** reload config easyly
#+BEGIN_SRC emacs-lisp
(defun reload-config ()
  "Reload configuration"
  (interactive)
  (load-file "~/.emacs.d/init.el"))

(defun open-config ()
  "Open configuration file"
  (interactive)
  (counsel-find-file "~/.emacs.d/emacs-init.org"))

(defun zshrc ()
  "Open ZSH configuration file"
  (interactive)
  (counsel-find-file "~/.zshrc"))
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
; Pour ne pas avoir à taper en entier la réponse yes/no
(fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq auto-revert-interval 1            ; Refresh buffers fast
      default-input-method "TeX"        ; Use TeX when toggling input method
      echo-keystrokes 0.1               ; Show keystrokes asap
      inhibit-startup-message t         ; No splash screen please
      initial-scratch-message nil       ; Clean scratch buffer
      recentf-max-saved-items 100       ; Show more recent files
      ring-bell-function 'ignore        ; Quiet
      sentence-end-double-space nil)    ; No double space

(dolist (mode
         '(column-number-mode           ; Show column number in mode line
           ; global-linum-mode                   ; Show line nummers
           delete-selection-mode        ; Replace selected text
           dirtrack-mode                ; directory tracking in *shell*
           recentf-mode                 ; Recently opened files
           show-paren-mode))            ; Highlight matching parentheses
  (funcall mode 1))

(setq-default fill-column 79                    ; Maximum line width
              truncate-lines t                  ; Don't fold lines
              indent-tabs-mode nil              ; Use spaces instead of tabs
              split-width-threshold 100         ; Split verticly by default
              )

(add-to-list 'auto-mode-alist '("\\.ino\\'" . c++-mode))

(global-set-key (kbd "²") 'dabbrev-expand)
(global-set-key (kbd "œ") 'dabbrev-expand)
(global-set-key (kbd "M-g") 'goto-line)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

* General looking and UI tweaks
** Theming
#+BEGIN_SRC emacs-lisp

;; Lets begin by installing some themes that I really enjoy
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users (use the colorful treemacs theme)
  (setq doom-themes-treemacs-theme "doom-colors")
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  )

(use-package all-the-icons
  :ensure t)

;; Use mode line
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  )

;; Package theme-looper, for easy looping throught my favorites themes.
(use-package theme-looper
  :ensure t
  :config
  (theme-looper-set-favorite-themes '(doom-solarized-light doom-solarized-dark
				    doom-gruvbox doom-one doom-one-light)))

;; Set the font
(set-face-attribute 'default nil
                    :family "Fira Code"
                    :height 110
                    :weight 'normal
                    :width 'normal)
#+END_SRC

** Help - Which key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.5))

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :init (setq dashboard-projects-backend 'projectile)
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

** Disabling GUI elements
#+BEGIN_SRC emacs-lisp
(dolist (mode
         '(tool-bar-mode                ; No toolbars, more room for text
           scroll-bar-mode              ; No scroll bars
           menu-bar-mode                ; No menu bar
           tooltip-mode                 ; No pop-up tips
           blink-cursor-mode))          ; The blinking cursor gets old
  (funcall mode -1))
(set-fringe-mode nil)                   ; left-right margins (nil=8px)
#+END_SRC

** Tiny Menu
#+BEGIN_SRC emacs-lisp
(use-package tiny-menu
  :ensure t
  :bind (("C-x m" . tiny-menu))
  :config
  (setq tiny-menu-items
        '(("buffer-menu"
           ("Buffer operations"
            ((?k "Kill" kill-this-buffer "buffer-menu")
             (?q "Quit Menu" nil "quit"))))
          ("projectile-menu"
           ("Projectile"
            ((?p "switch project" counsel-projectile-switch-project)
             (?b "switch to buffer" counsel-projectile-switch-to-buffer)
             (?f "switch file" counsel-projectile-find-file)
             (?i "ibuffer" projectil-ibuffer)
             (?d "dired" projectile-dired)
             (?a "activate" projectile-mode))))
          ("theme-changer"
           ("Change theme"
            ((?j "next theme" theme-looper-enable-next-theme "theme-changer")))))))
#+END_SRC

** Key bindings

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :defer t)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("l" nil "finished" :exit t))

(use-package general
  :config
  (general-create-definer jsim/leader-keys :prefix "C-x p")
  (jsim/leader-keys
    "s" '(counsel-search :which-key "web search")
    "r" '(reload-config :which-key "reload config")
    "p" '(:ignore t :which-key "projectile")
    "pp" '(counsel-projectile-switch-project :which-key "switch project")
    "pb" '(counsel-projectile-switch-to-buffer :which-key "switch to buffer")
    "pf" '(counsel-projectile-find-file :which-key "switch to file")
    "pi" '(projectile-ibuffer :which-key "ibuffer")
    "pd" '(projectile-dired :which-key "dired")
    "pt" '(projectile-mode :which-key "activate")
    "t" '(:ignore t :which-key "text")
    "ts" '(hydra-text-scale/body :which-key "scale text")
    )
  )

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package evil-tutor)
#+END_SRC

* Emacs autosaves settings
#+BEGIN_SRC emacs-lisp
(defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/")
  "This variable dictates where to put auto saves. It is set to a
  directory called autosaves located wherever your .emacs.d/ is
  located.")

;; Sets all files to be backed up and auto saved in a single directory.
(setq make-backup-files t)
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))
#+END_SRC

* Misc Packages
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :config (undo-tree-mode t))
#+END_SRC

* Editing
** Terminal

#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :ensure t
  :bind (("C-x M" . multi-term)
         ("C-x µ" . switch-to-term-mode-buffer))
  :config
  (setq multi-term-program "/usr/bin/zsh"
        term-buffer-maximum-size 10000)
  ;; ;; Enable compilation-shell-minor-mode in multi term.
  ;; ;; http://www.masteringemacs.org/articles/2012/05/29/compiling-running-scripts-emacs/
  (add-hook 'term-mode-hook
            (lambda ()
              (dolist
                  (bind '(("<M-down>" . multi-term)
                          ("<M-left>" . multi-term-prev)
                          ("<M-right>" . multi-term-next)
                          ("C-<backspace>" . term-send-backward-kill-word)
                          ("C-<delete>" . term-send-forward-kill-word)
                          ("C-<left>" . term-send-backward-word)
                          ("C-<right>" . term-send-forward-word)
                          ("C-c C-j" . term-line-mode)
                          ("C-c C-k" . term-char-mode)
                          ("C-v" . scroll-up)
                          ("C-y" . term-paste)
                          ("C-z" . term-stop-subjob)
                          ("M-DEL" . term-send-backward-kill-word)
                          ("M-d" . term-send-forward-kill-word)))
                (add-to-list 'term-bind-key-alist bind)))))
#+END_SRC

** Various modes -- Autoload fixing

#+BEGIN_SRC emacs-lisp
(use-package matlab
  :load-path "~/.emacs.d/lisp"
  :mode ("\\.m$" . matlab-mode))

(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . markdown-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))


(use-package anaconda-mode
  :ensure t
  :hook (python-mode . anaconda-mode)
)

(use-package spice-mode
  :ensure t
  :mode ("\\.sp\\'" . spice-mode))

(use-package julia-mode
  :ensure t
  :mode ("\\.jl\\'" . julia-mode))

(use-package julia-repl
  :ensure t
  :init (add-hook 'julia-mode-hook 'julia-repl-mode))

(add-to-list 'auto-mode-alist '("\\.make\\'" . makefile-gmake-mode))
(add-to-list 'auto-mode-alist '("\\.tab\\'" . (setq truncate-lines off)))

(add-to-list 'auto-mode-alist '("\\.dc_shell\\'" . tcl-mode))
(add-to-list 'auto-mode-alist '("\\.json\\'" . js-mode))

(add-to-list 'auto-mode-alist '("\\.tikz\\'" . latex-mode))
(add-to-list 'auto-mode-alist '("\\.tex\\'" . latex-mode))

(use-package jedi
  :ensure t
  :init (setq jedi:complete-on-dot t)
  :init (add-hook 'python-mode 'jedi:ac-setup)
)
#+END_SRC

** YASnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :bind (:map yas-minor-mode-map
              ("<tab>" . nil)
              ("TAB" . nil)
              ("œ" . yas-expand))
  :config
  (use-package yasnippet-snippets)
  (yas-reload-all)
  (dolist (hook '(org-mode-hook
                  fountain-mode-hook
                  vhdl-mode-hook))
    (add-hook hook 'yas-minor-mode)))
#+END_SRC

** Org mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :pin manual
  :bind (("C-c l" . org-store-link)
         ("C-x a" . org-agenda))
  :config
  ;; Org and writing source code inside org mode
  (setq org-ellipsis " ▾")
  (setq org-src-fontify-natively t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t)
  (org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (emacs-lisp . t)
   (org . t)
   (shell . t)
   (C . t)
   (python . t)
   ))
  ;; better bullets for titles
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  ;; Circular bullets instead of dashes for unsorted lists
  (font-lock-add-keywords 'org-mode
                          '(("^ +\\([-*]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  ;; defining directories 
  (setq org-directory (expand-file-name "~/Documents/Notebooks"))
  ;; defining keywords
  (setq org-todo-keywords
      '(
        (sequence "IDEA(i)" "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)")
        ))
  ;; C-c C-t to select the state of the todo
  (setq org-use-fast-todo-selection t)
  )
#+END_SRC

** Jupyter notebooks

#+begin_src emacs-lisp
(use-package ein
  :ensure t
  :config 
  (defalias 'jupyter-start 'ein:jupyter-server-start)
  (defalias 'jupyter-stop  'ein:jupyter-server-stop)
  )
#+end_src

** TODO Auto-completion with company
   =M-&=, =M-é= etc should work like =M-1= etc.
#+BEGIN_SRC emacs-lisp

(use-package company-anaconda
  :ensure t)
(use-package company
  :ensure t
  :diminish company-mode
  :bind ("C-<tab>" . company-complete)
  :config
  (add-to-list 'company-backends 'company-anaconda)
  (global-company-mode 1)
  (setq company-idle-delay 0.3)
  (setq company-show-numbers t)
  (setq company-minimum-prefix-length 2)
  (setq company-dabbrev-downcase nil)
  (setq company-dabbrev-other-buffers t)
  (setq company-auto-complete nil)
  (setq company-dabbrev-code-other-buffers 'all)
  (setq company-dabbrev-code-everywhere t)
  (setq company-dabbrev-code-ignore-case t)
  )
#+END_SRC

** Word processing
*** Fountain mode
#+BEGIN_SRC emacs-lisp
(use-package fountain-mode
  :ensure t
  :commands (draft-mode))
#+END_SRC

*** Draft mode
Usefull when I want to focus only on the writing.
#+BEGIN_SRC emacs-lisp
(use-package draft-mode
  :ensure t
  :commands (draft-mode))
#+END_SRC

* Navigation
** Jumps

#+BEGIN_SRC emacs-lisp
(use-package smart-jump
  :ensure t
  :config (smart-jump-setup-default-registers)
  :config (smart-jump-register 
         :modes 'anaconda-mode
         :jump-fn 'anaconda-mode-find-definitions
         :pop-fn 'anaconda-mode-go-back
         :refs-fn 'anaconda-mode-find-references
         :heuristic 'point
         :async 600))
#+END_SRC

** Project Management
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :bind (
         :map projectile-mode-map
              ("M-p" . projectile-command-map)
         )
  :config
  (use-package counsel-projectile
    :ensure t
    )
  (projectile-mode))
#+END_SRC

*** Versionning
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))

(use-package git-gutter
  :ensure t
  :config
  ;; activate git gutter everywhere
  (global-git-gutter-mode t)
  
  ; (git-gutter:linum-setup)
  (custom-set-variables
   '(git-gutter:update-interval 2)
   '(git-gutter:lighter " GG")
   '(git-gutter:modified-sign "  ")
   '(git-gutter:added-sign "++")
   '(git-gutter:deleted-sign "--")
   '(git-gutter:hide-gutter t))     ;; Hide Gutter if there is no changes

  (set-face-foreground 'git-gutter:added "green")
  (set-face-foreground 'git-gutter:deleted "red")
  )

#+END_SRC

** Window / Split management
*** Enhanced search with ivy-mode (Counsel & Swiper !)
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :init
  (setq
   ivy-use-virtual-buffers t
   projectil-completion-system 'ivy
   ivy-count-format "(%d/%d) ")
  :config
  (ivy-mode 1)
  :bind (("C-x C-r" . counsel-recentf)
	 ("C-x b" . ivy-switch-buffer)
	 ("C-c v" . ivy-push-view)
	 ("C-c V" . ivy-pop-view)
	 ("C-s" . counsel-grep-or-swiper)
	 ("M-s" . swiper-all)
	 ("M-x" . counsel-M-x)
	 ("C-x C-t" . counsel-load-theme)
	 ("M-a" . counsel-ag)
	 ("M-é" . counsel-imenu)
	 ("C-x C-f" . counsel-find-file)
	 ("M-r" . ivy-resume)
     ("C-s" . swiper)
     :map ivy-minibuffer-map
     ("TAB" . ivy-alt-done)
     ("C-l" . ivy-alt-done)
     ("C-j" . ivy-next-line)
     ("C-k" . ivy-previous-line)
     :map ivy-switch-buffer-map
     ("C-k" . ivy-previous-line)
     ("C-l" . ivy-done)
     ("C-d" . ivy-switch-buffer-kill)
     :map ivy-reverse-i-search-map
     ("C-k" . ivy-previous-line)
     ("C-d" . ivy-reverse-i-search-kill))
  )

(use-package ivy-rich
  :after ivy
  :init
   (ivy-rich-mode 1))
#+END_SRC

** File brower
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :commands (neotree-toggle)
  :config
  ;; (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  )

#+END_SRC


* Some old packages :noexport:

#+BEGIN_SRC emacs-lisp :tangle no
use-package paredit
  :ensure t
  :diminish paredit-mode
)

(use-package gruvbox-theme
  :ensure t)

(use-package desktop-menu
  :ensure t)
#+END_SRC

** Mode line
#+BEGIN_SRC emacs-lisp :tangle no
(use-package smart-mode-line
  :ensure t
  :init
  (setq sml/no-confirm-load-theme t)
  :config
  (sml/setup))
#+END_SRC

** Customization file
#+BEGIN_SRC emacs-lisp :tangle no
(setq custom-file "~/.emacs.d/emacs-custom.el")
(load-file custom-file)
#+END_SRC

** Eyebrowse
#+BEGIN_SRC emacs-lisp :tangle no
(use-package eyebrowse
  :ensure t
  :config
  (eyebrowse-mode t)
  (eyebrowse-setup-opinionated-keys))
#+END_SRC

** Acewindow
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ace-window
  :ensure t
  :config
  (setq aw-dispatch-always t)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC

** Search on steroid with Avy
#+BEGIN_SRC emacs-lisp :tangle no
(use-package avy
  :ensure t
  :config
  (setq avy-case-fold-search nil)       ;; case sensitive makes selection easier
)
#+END_SRC

** Ibuffer
*** vc-buffer de Purcell
#+begin_src emacs-lisp :tangle no
(use-package ibuffer-vc
  :ensure t)
#+end_src

*** General settings of ibuffer
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ibuffer
  :bind (("C-x C-b" . ibuffer)
         ("M-i" . next-buffer)
         ("M-o" . previous-buffer)))
#+END_SRC

** IMenu list
Because Imenu is pretty awesome to start with, having it always by my side
can't to bad.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package sr-speedbar
  :ensure t
  :bind (("C-œ". sr-speedbar-toggle))
  :config
  (setq sr-speedbar-auto-refresh t
        sr-speedbar-use-images nil
        sr-speedbar-show-unknown-files t
        sr-speedbar-right-side nil)
)
#+END_SRC
